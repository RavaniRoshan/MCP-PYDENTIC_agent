from pydantic import BaseModel, Field
from typing import Optional, List, Dict, Any
from datetime import datetime
from .browser_action import BrowserAction


class BrowserState(BaseModel):
    """
    Represents the current state of the browser, including the DOM and screenshots.

    Attributes:
        url (str): The current URL of the browser.
        title (str): The title of the current page.
        dom_content (str): The HTML content of the current page.
        screenshot_path (Optional[str]): The path to a screenshot of the current page.
        viewport_size (Optional[Dict[str, int]]): The width and height of the viewport.
        page_info (Optional[Dict[str, Any]]): A dictionary of additional page information.
        timestamp (datetime): The timestamp of when the state was captured.
    """
    url: str
    title: str
    dom_content: str = Field(..., description="HTML content of the current page")
    screenshot_path: Optional[str] = None
    viewport_size: Optional[Dict[str, int]] = None
    page_info: Optional[Dict[str, Any]] = Field(default_factory=dict)
    timestamp: datetime = Field(default_factory=datetime.utcnow)


class TaskExecutionPlan(BaseModel):
    """
    Represents a step-by-step plan generated by the AI.

    Attributes:
        id (str): A unique identifier for the plan.
        task_id (str): The ID of the task that this plan is for.
        actions (List[BrowserAction]): A list of browser actions to be executed.
        estimated_duration (Optional[int]): The estimated duration of the plan in seconds.
        created_at (datetime): The timestamp of when the plan was created.
        status (str): The current status of the plan (e.g., pending, executing, completed).
        metadata (Optional[Dict[str, Any]]): A dictionary of metadata for the plan.
    """
    id: str
    task_id: str
    actions: List[BrowserAction] = Field(default_factory=list)
    estimated_duration: Optional[int] = None
    created_at: datetime = Field(default_factory=datetime.utcnow)
    status: str = "pending"
    metadata: Optional[Dict[str, Any]] = Field(default_factory=dict)


class ActionResult(BaseModel):
    """
    Represents the result of an executed action.

    Attributes:
        action_id (str): The unique identifier for the action.
        success (bool): A flag indicating whether the action was successful.
        result (Optional[Any]): The result of the action.
        error (Optional[str]): A description of the error if the action failed.
        execution_time (Optional[float]): The execution time of the action in seconds.
        screenshot_after (Optional[str]): The path to a screenshot taken after the action was executed.
        dom_diff (Optional[Dict[str, Any]]): A dictionary representing the difference in the DOM after the action.
        timestamp (datetime): The timestamp of when the result was generated.
    """
    action_id: str
    success: bool
    result: Optional[Any] = None
    error: Optional[str] = None
    execution_time: Optional[float] = None
    screenshot_after: Optional[str] = None
    dom_diff: Optional[Dict[str, Any]] = None
    timestamp: datetime = Field(default_factory=datetime.utcnow)