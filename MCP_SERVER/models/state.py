from pydantic import BaseModel, Field
from typing import Optional, List, Dict, Any
from datetime import datetime
from .browser_action import BrowserAction


class BrowserState(BaseModel):
    """
    Current state of the browser (DOM, screenshots)
    """
    url: str
    title: str
    dom_content: str = Field(..., description="HTML content of the current page")
    screenshot_path: Optional[str] = None
    viewport_size: Optional[Dict[str, int]] = None  # width, height
    page_info: Optional[Dict[str, Any]] = Field(default_factory=dict)
    timestamp: datetime = Field(default_factory=datetime.utcnow)


class TaskExecutionPlan(BaseModel):
    """
    Step-by-step plan generated by AI
    """
    id: str
    task_id: str
    actions: List[BrowserAction] = Field(default_factory=list)
    estimated_duration: Optional[int] = None  # in seconds
    created_at: datetime = Field(default_factory=datetime.utcnow)
    status: str = "pending"  # pending, executing, completed, failed
    metadata: Optional[Dict[str, Any]] = Field(default_factory=dict)


class ActionResult(BaseModel):
    """
    Results of executed actions
    """
    action_id: str
    success: bool
    result: Optional[Any] = None
    error: Optional[str] = None
    execution_time: Optional[float] = None  # in seconds
    screenshot_after: Optional[str] = None
    dom_diff: Optional[Dict[str, Any]] = None
    timestamp: datetime = Field(default_factory=datetime.utcnow)